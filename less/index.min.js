const fs=require("fs"),path=require("path"),core=require("@actions/core"),less=require("less"),glob=require("glob");try{const e=core.getInput("target"),t=core.getInput("destination");let s=core.getInput("modified");try{s=JSON.parse(s)}catch(e){s=[]}for(let r of glob.sync(e)){const e={paths:[path.dirname(r)]};less.render(fs.readFileSync(r,"utf8"),e).then(e=>{let a=path.basename(r).replace(".less",".css"),o="";t?t.endsWith(path.sep)&&(o=path.join(t,a)):o=path.join(path.dirname(r),a),fs.writeFileSync(o,e.css,{encoding:"utf8"}),console.log(`Compiled ${a} -> ${o}`),s.append(o)}).catch(e=>{core.setFailed(e.message)})}core.setOutput("modified",JSON.stringify(s))}catch(e){core.setFailed(e.message)}