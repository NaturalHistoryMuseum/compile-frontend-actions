const fs=require("fs"),path=require("path"),core=require("@actions/core"),terser=require("terser"),glob=require("glob");try{const e=core.getInput("target"),t=core.getInput("destination");let r=core.getInput("modified");try{r=JSON.parse(r)}catch(e){r=[]}const i={compress:!0,mangle:!0};for(let o of glob.sync(e)){if(o.endsWith(".min.js"))continue;let e=terser.minify(fs.readFileSync(o,"utf8"),i);if(e.error)throw e.error;let s=path.basename(o).replace(".js",".min.js"),n="";t?t.endsWith(path.sep)&&(n=path.join(t,s)):n=path.join(path.dirname(o),s),fs.writeFileSync(n,e.code,{encoding:"utf8"}),console.log(`Minified ${s} -> ${n}`),r.push(n)}core.setOutput("modified",JSON.stringify(r))}catch(e){core.setFailed(e.message)}